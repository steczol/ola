language: cpp
sudo: false
script:
 - "bash -ex .travis-ci.sh"

matrix:
  fast_finish: true
  include:
    - compiler: clang
      env: TASK='compile'
    - compiler: gcc
      env: TASK='compile'
    - compiler: gcc
      env: TASK='coverage'
    - compiler: gcc
      env: TASK='coverity'
    - env: TASK='doxygen'
    - env: TASK='lint'
    - env: TASK='check-licences'
    - env: TASK='jshint'
    - env: TASK='flake8'
  allow_failures:
    - compiler: gcc
      env: TASK='coverage'
    - compiler: gcc
      env: TASK='coverity'
    - env: TASK='flake8'

env:
  global:
   # -- BEGIN Coverity Scan ENV
   - COVERITY_SCAN_BUILD_COMMAND_PREPEND="autoreconf -i && ./configure --enable-ja-rule"
   # The build command with all of the arguments that you would apply to a manual `cov-build`
   # Usually this is the same as STANDARD_BUILD_COMMAND, exluding the automated test arguments
   - COVERITY_SCAN_BUILD_COMMAND="make"
   # Name of the project
   - COVERITY_SCAN_PROJECT_NAME="$TRAVIS_REPO_SLUG"
   # Email address for notifications related to this build
   - COVERITY_SCAN_NOTIFICATION_EMAIL="ola-coverity@pjnewman.co.uk"
   # Regular expression selects on which branches to run analysis
   # Be aware of quotas. Do not run on every branch/commit
   - COVERITY_SCAN_BRANCH_PATTERN=".*"
   # COVERITY_SCAN_TOKEN via "travis encrypt" using the repo's public key
   - secure: "U+NmPtScHZ1NLmkDrzpqApHmJvELV44cXgjQsxA8N8xIATckbs+DrmWSNeECENyvuOPz+nPzglSgBvJtejf97jYJIIwAExq5TJMUAIPFS6KU3mohODW2PZSoVoUyJPzFIlhzcELQgONI+ILLm29lNdQNb7GFUVtO6+jS10AFtWY="
   # -- END Coverity Scan ENV

cache:
  apt: true
  directories:
    - $HOME/.cache/pip # pip cache
    - $HOME/.npm # npm cache
    - $HOME/.ccache # ccache cache

before_cache:
  - rm -f $HOME/.cache/pip/log/debug.log # erase log
  - ccache -s # see how many hits ccache got

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise
    packages:
      - protobuf-compiler
      - libprotoc-dev
      - libprotobuf-dev
      - protobuf-c-compiler
      - bison
      - flex
      - libftdi-dev
      - libftdi1
      - libusb-1.0-0-dev
      - liblo-dev
      - libavahi-glib1
      - uuid-dev
      - libcppunit-dev
      - libncurses5-dev
      - python-protobuf
      - libmicrohttpd-dev
      - doxygen
      - graphviz
      - g++-5
      - g++-4.9
      - ccache
      - clang-3.8

install:
  - pip install --user protobuf==2.4.1
  - pip install --user cpp-coveralls
  - pip install --user flake8
  - npm install -g grunt-cli

before_install:
#Coverity doesn't work with g++ 5, so only upgrade to g++ 4.9 for that
 - if [ "$TASK" != "coverity" -a "$CXX" = "g++" ]; then export CXX="ccache g++-5" CC="ccache gcc-5"; fi
 - if [ "$TASK" = "coverity" -a "$CXX" = "g++" ]; then export CXX="ccache g++-4.9" CC="ccache gcc-4.9"; fi
#Use the latest clang if we're compiling with clang
 - if [ "$CXX" = "clang++" ]; then export CXX="clang++-3.8" CC="clang-3.8"; fi
#Report the compiler version
 - $CXX --version

after_success:
  - if [ "$TASK" = "coverity" ]; then cat /home/travis/build/${TRAVIS_REPO_SLUG}/cov-int/scm_log.txt; fi
  - if [ "$TASK" = "coverage" ]; then coveralls --gcov /usr/bin/gcov-5 -b . -E '.*Test\.cpp$' -E '.*\.pb\.cc$' -E '.*\.pb\.cpp$' -E '.*\.pb\.h$' -E '.*\.yy\.cpp$' -E '.*\.tab\.cpp$' -E '.*\.tab\.h$' -E '.*/doxygen/examples.*$' --gcov-options '\-lp' > /dev/null; fi

notifications:
  irc:
    channels:
     - "chat.freenode.net#openlighting"
    on_success: change
    on_failure: change
